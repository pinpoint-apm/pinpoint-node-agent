// source: v1/Span.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var v1_Annotation_pb = require('../v1/Annotation_pb.js');
goog.object.extend(proto, v1_Annotation_pb);
goog.exportSymbol('proto.v1.PAcceptEvent', null, global);
goog.exportSymbol('proto.v1.PApiMetaData', null, global);
goog.exportSymbol('proto.v1.PLocalAsyncId', null, global);
goog.exportSymbol('proto.v1.PMessageEvent', null, global);
goog.exportSymbol('proto.v1.PNextEvent', null, global);
goog.exportSymbol('proto.v1.PNextEvent.FieldCase', null, global);
goog.exportSymbol('proto.v1.PParentInfo', null, global);
goog.exportSymbol('proto.v1.PResult', null, global);
goog.exportSymbol('proto.v1.PSpan', null, global);
goog.exportSymbol('proto.v1.PSpanChunk', null, global);
goog.exportSymbol('proto.v1.PSpanEvent', null, global);
goog.exportSymbol('proto.v1.PSpanMessage', null, global);
goog.exportSymbol('proto.v1.PSpanMessage.FieldCase', null, global);
goog.exportSymbol('proto.v1.PSqlMetaData', null, global);
goog.exportSymbol('proto.v1.PStringMetaData', null, global);
goog.exportSymbol('proto.v1.PTransactionId', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PSpanMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.PSpanMessage.oneofGroups_);
};
goog.inherits(proto.v1.PSpanMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PSpanMessage.displayName = 'proto.v1.PSpanMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PSpan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PSpan.repeatedFields_, null);
};
goog.inherits(proto.v1.PSpan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PSpan.displayName = 'proto.v1.PSpan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PTransactionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PTransactionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PTransactionId.displayName = 'proto.v1.PTransactionId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PAcceptEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PAcceptEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PAcceptEvent.displayName = 'proto.v1.PAcceptEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PParentInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PParentInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PParentInfo.displayName = 'proto.v1.PParentInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PLocalAsyncId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PLocalAsyncId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PLocalAsyncId.displayName = 'proto.v1.PLocalAsyncId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PSpanEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PSpanEvent.repeatedFields_, null);
};
goog.inherits(proto.v1.PSpanEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PSpanEvent.displayName = 'proto.v1.PSpanEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PNextEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.PNextEvent.oneofGroups_);
};
goog.inherits(proto.v1.PNextEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PNextEvent.displayName = 'proto.v1.PNextEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PMessageEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PMessageEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PMessageEvent.displayName = 'proto.v1.PMessageEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PSpanChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PSpanChunk.repeatedFields_, null);
};
goog.inherits(proto.v1.PSpanChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PSpanChunk.displayName = 'proto.v1.PSpanChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PResult.displayName = 'proto.v1.PResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PSqlMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PSqlMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PSqlMetaData.displayName = 'proto.v1.PSqlMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PApiMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PApiMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PApiMetaData.displayName = 'proto.v1.PApiMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PStringMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PStringMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PStringMetaData.displayName = 'proto.v1.PStringMetaData';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.PSpanMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.v1.PSpanMessage.FieldCase = {
  FIELD_NOT_SET: 0,
  SPAN: 1,
  SPANCHUNK: 2
};

/**
 * @return {proto.v1.PSpanMessage.FieldCase}
 */
proto.v1.PSpanMessage.prototype.getFieldCase = function() {
  return /** @type {proto.v1.PSpanMessage.FieldCase} */(jspb.Message.computeOneofCase(this, proto.v1.PSpanMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PSpanMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PSpanMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PSpanMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpanMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    span: (f = msg.getSpan()) && proto.v1.PSpan.toObject(includeInstance, f),
    spanchunk: (f = msg.getSpanchunk()) && proto.v1.PSpanChunk.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PSpanMessage}
 */
proto.v1.PSpanMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PSpanMessage;
  return proto.v1.PSpanMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PSpanMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PSpanMessage}
 */
proto.v1.PSpanMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.PSpan;
      reader.readMessage(value,proto.v1.PSpan.deserializeBinaryFromReader);
      msg.setSpan(value);
      break;
    case 2:
      var value = new proto.v1.PSpanChunk;
      reader.readMessage(value,proto.v1.PSpanChunk.deserializeBinaryFromReader);
      msg.setSpanchunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PSpanMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PSpanMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PSpanMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpanMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpan();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.PSpan.serializeBinaryToWriter
    );
  }
  f = message.getSpanchunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.PSpanChunk.serializeBinaryToWriter
    );
  }
};


/**
 * optional PSpan span = 1;
 * @return {?proto.v1.PSpan}
 */
proto.v1.PSpanMessage.prototype.getSpan = function() {
  return /** @type{?proto.v1.PSpan} */ (
    jspb.Message.getWrapperField(this, proto.v1.PSpan, 1));
};


/**
 * @param {?proto.v1.PSpan|undefined} value
 * @return {!proto.v1.PSpanMessage} returns this
*/
proto.v1.PSpanMessage.prototype.setSpan = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.v1.PSpanMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpanMessage} returns this
 */
proto.v1.PSpanMessage.prototype.clearSpan = function() {
  return this.setSpan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpanMessage.prototype.hasSpan = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PSpanChunk spanChunk = 2;
 * @return {?proto.v1.PSpanChunk}
 */
proto.v1.PSpanMessage.prototype.getSpanchunk = function() {
  return /** @type{?proto.v1.PSpanChunk} */ (
    jspb.Message.getWrapperField(this, proto.v1.PSpanChunk, 2));
};


/**
 * @param {?proto.v1.PSpanChunk|undefined} value
 * @return {!proto.v1.PSpanMessage} returns this
*/
proto.v1.PSpanMessage.prototype.setSpanchunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.v1.PSpanMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpanMessage} returns this
 */
proto.v1.PSpanMessage.prototype.clearSpanchunk = function() {
  return this.setSpanchunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpanMessage.prototype.hasSpanchunk = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PSpan.repeatedFields_ = [10,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PSpan.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PSpan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PSpan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpan.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionid: (f = msg.getTransactionid()) && proto.v1.PTransactionId.toObject(includeInstance, f),
    spanid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    parentspanid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    starttime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    elapsed: jspb.Message.getFieldWithDefault(msg, 6, 0),
    apiid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    servicetype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    acceptevent: (f = msg.getAcceptevent()) && proto.v1.PAcceptEvent.toObject(includeInstance, f),
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    v1_Annotation_pb.PAnnotation.toObject, includeInstance),
    flag: jspb.Message.getFieldWithDefault(msg, 11, 0),
    err: jspb.Message.getFieldWithDefault(msg, 12, 0),
    spaneventList: jspb.Message.toObjectList(msg.getSpaneventList(),
    proto.v1.PSpanEvent.toObject, includeInstance),
    exceptioninfo: (f = msg.getExceptioninfo()) && v1_Annotation_pb.PIntStringValue.toObject(includeInstance, f),
    applicationservicetype: jspb.Message.getFieldWithDefault(msg, 15, 0),
    loggingtransactioninfo: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PSpan}
 */
proto.v1.PSpan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PSpan;
  return proto.v1.PSpan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PSpan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PSpan}
 */
proto.v1.PSpan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.v1.PTransactionId;
      reader.readMessage(value,proto.v1.PTransactionId.deserializeBinaryFromReader);
      msg.setTransactionid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSpanid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setParentspanid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setElapsed(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApiid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServicetype(value);
      break;
    case 9:
      var value = new proto.v1.PAcceptEvent;
      reader.readMessage(value,proto.v1.PAcceptEvent.deserializeBinaryFromReader);
      msg.setAcceptevent(value);
      break;
    case 10:
      var value = new v1_Annotation_pb.PAnnotation;
      reader.readMessage(value,v1_Annotation_pb.PAnnotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlag(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setErr(value);
      break;
    case 13:
      var value = new proto.v1.PSpanEvent;
      reader.readMessage(value,proto.v1.PSpanEvent.deserializeBinaryFromReader);
      msg.addSpanevent(value);
      break;
    case 14:
      var value = new v1_Annotation_pb.PIntStringValue;
      reader.readMessage(value,v1_Annotation_pb.PIntStringValue.deserializeBinaryFromReader);
      msg.setExceptioninfo(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationservicetype(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoggingtransactioninfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PSpan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PSpan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PSpan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTransactionid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.PTransactionId.serializeBinaryToWriter
    );
  }
  f = message.getSpanid();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getParentspanid();
  if (f !== 0) {
    writer.writeSfixed64(
      4,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getElapsed();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getApiid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getServicetype();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getAcceptevent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.v1.PAcceptEvent.serializeBinaryToWriter
    );
  }
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      v1_Annotation_pb.PAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getErr();
  if (f !== 0) {
    writer.writeSint32(
      12,
      f
    );
  }
  f = message.getSpaneventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.v1.PSpanEvent.serializeBinaryToWriter
    );
  }
  f = message.getExceptioninfo();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      v1_Annotation_pb.PIntStringValue.serializeBinaryToWriter
    );
  }
  f = message.getApplicationservicetype();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getLoggingtransactioninfo();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.v1.PSpan.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PTransactionId transactionId = 2;
 * @return {?proto.v1.PTransactionId}
 */
proto.v1.PSpan.prototype.getTransactionid = function() {
  return /** @type{?proto.v1.PTransactionId} */ (
    jspb.Message.getWrapperField(this, proto.v1.PTransactionId, 2));
};


/**
 * @param {?proto.v1.PTransactionId|undefined} value
 * @return {!proto.v1.PSpan} returns this
*/
proto.v1.PSpan.prototype.setTransactionid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.clearTransactionid = function() {
  return this.setTransactionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpan.prototype.hasTransactionid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 spanId = 3;
 * @return {number}
 */
proto.v1.PSpan.prototype.getSpanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setSpanid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sfixed64 parentSpanId = 4;
 * @return {number}
 */
proto.v1.PSpan.prototype.getParentspanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setParentspanid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 startTime = 5;
 * @return {number}
 */
proto.v1.PSpan.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 elapsed = 6;
 * @return {number}
 */
proto.v1.PSpan.prototype.getElapsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setElapsed = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 apiId = 7;
 * @return {number}
 */
proto.v1.PSpan.prototype.getApiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setApiid = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 serviceType = 8;
 * @return {number}
 */
proto.v1.PSpan.prototype.getServicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setServicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional PAcceptEvent acceptEvent = 9;
 * @return {?proto.v1.PAcceptEvent}
 */
proto.v1.PSpan.prototype.getAcceptevent = function() {
  return /** @type{?proto.v1.PAcceptEvent} */ (
    jspb.Message.getWrapperField(this, proto.v1.PAcceptEvent, 9));
};


/**
 * @param {?proto.v1.PAcceptEvent|undefined} value
 * @return {!proto.v1.PSpan} returns this
*/
proto.v1.PSpan.prototype.setAcceptevent = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.clearAcceptevent = function() {
  return this.setAcceptevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpan.prototype.hasAcceptevent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated PAnnotation annotation = 10;
 * @return {!Array<!proto.v1.PAnnotation>}
 */
proto.v1.PSpan.prototype.getAnnotationList = function() {
  return /** @type{!Array<!proto.v1.PAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, v1_Annotation_pb.PAnnotation, 10));
};


/**
 * @param {!Array<!proto.v1.PAnnotation>} value
 * @return {!proto.v1.PSpan} returns this
*/
proto.v1.PSpan.prototype.setAnnotationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.v1.PAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PAnnotation}
 */
proto.v1.PSpan.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.v1.PAnnotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.clearAnnotationList = function() {
  return this.setAnnotationList([]);
};


/**
 * optional int32 flag = 11;
 * @return {number}
 */
proto.v1.PSpan.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional sint32 err = 12;
 * @return {number}
 */
proto.v1.PSpan.prototype.getErr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setErr = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * repeated PSpanEvent spanEvent = 13;
 * @return {!Array<!proto.v1.PSpanEvent>}
 */
proto.v1.PSpan.prototype.getSpaneventList = function() {
  return /** @type{!Array<!proto.v1.PSpanEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PSpanEvent, 13));
};


/**
 * @param {!Array<!proto.v1.PSpanEvent>} value
 * @return {!proto.v1.PSpan} returns this
*/
proto.v1.PSpan.prototype.setSpaneventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.v1.PSpanEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PSpanEvent}
 */
proto.v1.PSpan.prototype.addSpanevent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.v1.PSpanEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.clearSpaneventList = function() {
  return this.setSpaneventList([]);
};


/**
 * optional PIntStringValue exceptionInfo = 14;
 * @return {?proto.v1.PIntStringValue}
 */
proto.v1.PSpan.prototype.getExceptioninfo = function() {
  return /** @type{?proto.v1.PIntStringValue} */ (
    jspb.Message.getWrapperField(this, v1_Annotation_pb.PIntStringValue, 14));
};


/**
 * @param {?proto.v1.PIntStringValue|undefined} value
 * @return {!proto.v1.PSpan} returns this
*/
proto.v1.PSpan.prototype.setExceptioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.clearExceptioninfo = function() {
  return this.setExceptioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpan.prototype.hasExceptioninfo = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 applicationServiceType = 15;
 * @return {number}
 */
proto.v1.PSpan.prototype.getApplicationservicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setApplicationservicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 loggingTransactionInfo = 16;
 * @return {number}
 */
proto.v1.PSpan.prototype.getLoggingtransactioninfo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpan} returns this
 */
proto.v1.PSpan.prototype.setLoggingtransactioninfo = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PTransactionId.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PTransactionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PTransactionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PTransactionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agentstarttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PTransactionId}
 */
proto.v1.PTransactionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PTransactionId;
  return proto.v1.PTransactionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PTransactionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PTransactionId}
 */
proto.v1.PTransactionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAgentstarttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PTransactionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PTransactionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PTransactionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PTransactionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgentstarttime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string agentId = 1;
 * @return {string}
 */
proto.v1.PTransactionId.prototype.getAgentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PTransactionId} returns this
 */
proto.v1.PTransactionId.prototype.setAgentid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 agentStartTime = 2;
 * @return {number}
 */
proto.v1.PTransactionId.prototype.getAgentstarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PTransactionId} returns this
 */
proto.v1.PTransactionId.prototype.setAgentstarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 sequence = 3;
 * @return {number}
 */
proto.v1.PTransactionId.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PTransactionId} returns this
 */
proto.v1.PTransactionId.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PAcceptEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PAcceptEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PAcceptEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PAcceptEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    rpc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    remoteaddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parentinfo: (f = msg.getParentinfo()) && proto.v1.PParentInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PAcceptEvent}
 */
proto.v1.PAcceptEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PAcceptEvent;
  return proto.v1.PAcceptEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PAcceptEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PAcceptEvent}
 */
proto.v1.PAcceptEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRpc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemoteaddr(value);
      break;
    case 4:
      var value = new proto.v1.PParentInfo;
      reader.readMessage(value,proto.v1.PParentInfo.deserializeBinaryFromReader);
      msg.setParentinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PAcceptEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PAcceptEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PAcceptEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PAcceptEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRpc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemoteaddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParentinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.PParentInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string rpc = 1;
 * @return {string}
 */
proto.v1.PAcceptEvent.prototype.getRpc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PAcceptEvent} returns this
 */
proto.v1.PAcceptEvent.prototype.setRpc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string endPoint = 2;
 * @return {string}
 */
proto.v1.PAcceptEvent.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PAcceptEvent} returns this
 */
proto.v1.PAcceptEvent.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string remoteAddr = 3;
 * @return {string}
 */
proto.v1.PAcceptEvent.prototype.getRemoteaddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PAcceptEvent} returns this
 */
proto.v1.PAcceptEvent.prototype.setRemoteaddr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional PParentInfo parentInfo = 4;
 * @return {?proto.v1.PParentInfo}
 */
proto.v1.PAcceptEvent.prototype.getParentinfo = function() {
  return /** @type{?proto.v1.PParentInfo} */ (
    jspb.Message.getWrapperField(this, proto.v1.PParentInfo, 4));
};


/**
 * @param {?proto.v1.PParentInfo|undefined} value
 * @return {!proto.v1.PAcceptEvent} returns this
*/
proto.v1.PAcceptEvent.prototype.setParentinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PAcceptEvent} returns this
 */
proto.v1.PAcceptEvent.prototype.clearParentinfo = function() {
  return this.setParentinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PAcceptEvent.prototype.hasParentinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PParentInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PParentInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PParentInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PParentInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentapplicationname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parentapplicationtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    acceptorhost: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PParentInfo}
 */
proto.v1.PParentInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PParentInfo;
  return proto.v1.PParentInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PParentInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PParentInfo}
 */
proto.v1.PParentInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentapplicationname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentapplicationtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcceptorhost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PParentInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PParentInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PParentInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PParentInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentapplicationname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParentapplicationtype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getAcceptorhost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string parentApplicationName = 1;
 * @return {string}
 */
proto.v1.PParentInfo.prototype.getParentapplicationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PParentInfo} returns this
 */
proto.v1.PParentInfo.prototype.setParentapplicationname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 parentApplicationType = 2;
 * @return {number}
 */
proto.v1.PParentInfo.prototype.getParentapplicationtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PParentInfo} returns this
 */
proto.v1.PParentInfo.prototype.setParentapplicationtype = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string acceptorHost = 3;
 * @return {string}
 */
proto.v1.PParentInfo.prototype.getAcceptorhost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PParentInfo} returns this
 */
proto.v1.PParentInfo.prototype.setAcceptorhost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PLocalAsyncId.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PLocalAsyncId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PLocalAsyncId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLocalAsyncId.toObject = function(includeInstance, msg) {
  var f, obj = {
    asyncid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PLocalAsyncId}
 */
proto.v1.PLocalAsyncId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PLocalAsyncId;
  return proto.v1.PLocalAsyncId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PLocalAsyncId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PLocalAsyncId}
 */
proto.v1.PLocalAsyncId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAsyncid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PLocalAsyncId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PLocalAsyncId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PLocalAsyncId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLocalAsyncId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsyncid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 asyncId = 1;
 * @return {number}
 */
proto.v1.PLocalAsyncId.prototype.getAsyncid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PLocalAsyncId} returns this
 */
proto.v1.PLocalAsyncId.prototype.setAsyncid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sequence = 2;
 * @return {number}
 */
proto.v1.PLocalAsyncId.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PLocalAsyncId} returns this
 */
proto.v1.PLocalAsyncId.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PSpanEvent.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PSpanEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PSpanEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PSpanEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpanEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    depth: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startelapsed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endelapsed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    servicetype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    annotationList: jspb.Message.toObjectList(msg.getAnnotationList(),
    v1_Annotation_pb.PAnnotation.toObject, includeInstance),
    apiid: jspb.Message.getFieldWithDefault(msg, 10, 0),
    exceptioninfo: (f = msg.getExceptioninfo()) && v1_Annotation_pb.PIntStringValue.toObject(includeInstance, f),
    nextevent: (f = msg.getNextevent()) && proto.v1.PNextEvent.toObject(includeInstance, f),
    asyncevent: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PSpanEvent}
 */
proto.v1.PSpanEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PSpanEvent;
  return proto.v1.PSpanEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PSpanEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PSpanEvent}
 */
proto.v1.PSpanEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartelapsed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndelapsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setServicetype(value);
      break;
    case 6:
      var value = new v1_Annotation_pb.PAnnotation;
      reader.readMessage(value,v1_Annotation_pb.PAnnotation.deserializeBinaryFromReader);
      msg.addAnnotation(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setApiid(value);
      break;
    case 11:
      var value = new v1_Annotation_pb.PIntStringValue;
      reader.readMessage(value,v1_Annotation_pb.PIntStringValue.deserializeBinaryFromReader);
      msg.setExceptioninfo(value);
      break;
    case 12:
      var value = new proto.v1.PNextEvent;
      reader.readMessage(value,proto.v1.PNextEvent.deserializeBinaryFromReader);
      msg.setNextevent(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAsyncevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PSpanEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PSpanEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PSpanEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpanEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStartelapsed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEndelapsed();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getServicetype();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getAnnotationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      v1_Annotation_pb.PAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getApiid();
  if (f !== 0) {
    writer.writeSint32(
      10,
      f
    );
  }
  f = message.getExceptioninfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      v1_Annotation_pb.PIntStringValue.serializeBinaryToWriter
    );
  }
  f = message.getNextevent();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.v1.PNextEvent.serializeBinaryToWriter
    );
  }
  f = message.getAsyncevent();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int32 sequence = 1;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 depth = 2;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 startElapsed = 3;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getStartelapsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setStartelapsed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 endElapsed = 4;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getEndelapsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setEndelapsed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 serviceType = 5;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getServicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setServicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated PAnnotation annotation = 6;
 * @return {!Array<!proto.v1.PAnnotation>}
 */
proto.v1.PSpanEvent.prototype.getAnnotationList = function() {
  return /** @type{!Array<!proto.v1.PAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, v1_Annotation_pb.PAnnotation, 6));
};


/**
 * @param {!Array<!proto.v1.PAnnotation>} value
 * @return {!proto.v1.PSpanEvent} returns this
*/
proto.v1.PSpanEvent.prototype.setAnnotationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.v1.PAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PAnnotation}
 */
proto.v1.PSpanEvent.prototype.addAnnotation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.v1.PAnnotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.clearAnnotationList = function() {
  return this.setAnnotationList([]);
};


/**
 * optional sint32 apiId = 10;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getApiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setApiid = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional PIntStringValue exceptionInfo = 11;
 * @return {?proto.v1.PIntStringValue}
 */
proto.v1.PSpanEvent.prototype.getExceptioninfo = function() {
  return /** @type{?proto.v1.PIntStringValue} */ (
    jspb.Message.getWrapperField(this, v1_Annotation_pb.PIntStringValue, 11));
};


/**
 * @param {?proto.v1.PIntStringValue|undefined} value
 * @return {!proto.v1.PSpanEvent} returns this
*/
proto.v1.PSpanEvent.prototype.setExceptioninfo = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.clearExceptioninfo = function() {
  return this.setExceptioninfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpanEvent.prototype.hasExceptioninfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PNextEvent nextEvent = 12;
 * @return {?proto.v1.PNextEvent}
 */
proto.v1.PSpanEvent.prototype.getNextevent = function() {
  return /** @type{?proto.v1.PNextEvent} */ (
    jspb.Message.getWrapperField(this, proto.v1.PNextEvent, 12));
};


/**
 * @param {?proto.v1.PNextEvent|undefined} value
 * @return {!proto.v1.PSpanEvent} returns this
*/
proto.v1.PSpanEvent.prototype.setNextevent = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.clearNextevent = function() {
  return this.setNextevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpanEvent.prototype.hasNextevent = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 asyncEvent = 13;
 * @return {number}
 */
proto.v1.PSpanEvent.prototype.getAsyncevent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanEvent} returns this
 */
proto.v1.PSpanEvent.prototype.setAsyncevent = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.PNextEvent.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.v1.PNextEvent.FieldCase = {
  FIELD_NOT_SET: 0,
  MESSAGEEVENT: 1
};

/**
 * @return {proto.v1.PNextEvent.FieldCase}
 */
proto.v1.PNextEvent.prototype.getFieldCase = function() {
  return /** @type {proto.v1.PNextEvent.FieldCase} */(jspb.Message.computeOneofCase(this, proto.v1.PNextEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PNextEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PNextEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PNextEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PNextEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageevent: (f = msg.getMessageevent()) && proto.v1.PMessageEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PNextEvent}
 */
proto.v1.PNextEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PNextEvent;
  return proto.v1.PNextEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PNextEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PNextEvent}
 */
proto.v1.PNextEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.PMessageEvent;
      reader.readMessage(value,proto.v1.PMessageEvent.deserializeBinaryFromReader);
      msg.setMessageevent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PNextEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PNextEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PNextEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PNextEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageevent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.PMessageEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional PMessageEvent messageEvent = 1;
 * @return {?proto.v1.PMessageEvent}
 */
proto.v1.PNextEvent.prototype.getMessageevent = function() {
  return /** @type{?proto.v1.PMessageEvent} */ (
    jspb.Message.getWrapperField(this, proto.v1.PMessageEvent, 1));
};


/**
 * @param {?proto.v1.PMessageEvent|undefined} value
 * @return {!proto.v1.PNextEvent} returns this
*/
proto.v1.PNextEvent.prototype.setMessageevent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.v1.PNextEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PNextEvent} returns this
 */
proto.v1.PNextEvent.prototype.clearMessageevent = function() {
  return this.setMessageevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PNextEvent.prototype.hasMessageevent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PMessageEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PMessageEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PMessageEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PMessageEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    nextspanid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endpoint: jspb.Message.getFieldWithDefault(msg, 2, ""),
    destinationid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PMessageEvent}
 */
proto.v1.PMessageEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PMessageEvent;
  return proto.v1.PMessageEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PMessageEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PMessageEvent}
 */
proto.v1.PMessageEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setNextspanid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestinationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PMessageEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PMessageEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PMessageEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PMessageEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNextspanid();
  if (f !== 0) {
    writer.writeSfixed64(
      1,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDestinationid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional sfixed64 nextSpanId = 1;
 * @return {number}
 */
proto.v1.PMessageEvent.prototype.getNextspanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PMessageEvent} returns this
 */
proto.v1.PMessageEvent.prototype.setNextspanid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string endPoint = 2;
 * @return {string}
 */
proto.v1.PMessageEvent.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PMessageEvent} returns this
 */
proto.v1.PMessageEvent.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string destinationId = 3;
 * @return {string}
 */
proto.v1.PMessageEvent.prototype.getDestinationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PMessageEvent} returns this
 */
proto.v1.PMessageEvent.prototype.setDestinationid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PSpanChunk.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PSpanChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PSpanChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PSpanChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpanChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionid: (f = msg.getTransactionid()) && proto.v1.PTransactionId.toObject(includeInstance, f),
    spanid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    spaneventList: jspb.Message.toObjectList(msg.getSpaneventList(),
    proto.v1.PSpanEvent.toObject, includeInstance),
    applicationservicetype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    keytime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    localasyncid: (f = msg.getLocalasyncid()) && proto.v1.PLocalAsyncId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PSpanChunk}
 */
proto.v1.PSpanChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PSpanChunk;
  return proto.v1.PSpanChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PSpanChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PSpanChunk}
 */
proto.v1.PSpanChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.v1.PTransactionId;
      reader.readMessage(value,proto.v1.PTransactionId.deserializeBinaryFromReader);
      msg.setTransactionid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSfixed64());
      msg.setSpanid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 5:
      var value = new proto.v1.PSpanEvent;
      reader.readMessage(value,proto.v1.PSpanEvent.deserializeBinaryFromReader);
      msg.addSpanevent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApplicationservicetype(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setKeytime(value);
      break;
    case 8:
      var value = new proto.v1.PLocalAsyncId;
      reader.readMessage(value,proto.v1.PLocalAsyncId.deserializeBinaryFromReader);
      msg.setLocalasyncid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PSpanChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PSpanChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PSpanChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSpanChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTransactionid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.PTransactionId.serializeBinaryToWriter
    );
  }
  f = message.getSpanid();
  if (f !== 0) {
    writer.writeSfixed64(
      3,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSpaneventList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.v1.PSpanEvent.serializeBinaryToWriter
    );
  }
  f = message.getApplicationservicetype();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getKeytime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getLocalasyncid();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.v1.PLocalAsyncId.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.v1.PSpanChunk.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PTransactionId transactionId = 2;
 * @return {?proto.v1.PTransactionId}
 */
proto.v1.PSpanChunk.prototype.getTransactionid = function() {
  return /** @type{?proto.v1.PTransactionId} */ (
    jspb.Message.getWrapperField(this, proto.v1.PTransactionId, 2));
};


/**
 * @param {?proto.v1.PTransactionId|undefined} value
 * @return {!proto.v1.PSpanChunk} returns this
*/
proto.v1.PSpanChunk.prototype.setTransactionid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.clearTransactionid = function() {
  return this.setTransactionid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpanChunk.prototype.hasTransactionid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sfixed64 spanId = 3;
 * @return {number}
 */
proto.v1.PSpanChunk.prototype.getSpanid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.setSpanid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string endPoint = 4;
 * @return {string}
 */
proto.v1.PSpanChunk.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated PSpanEvent spanEvent = 5;
 * @return {!Array<!proto.v1.PSpanEvent>}
 */
proto.v1.PSpanChunk.prototype.getSpaneventList = function() {
  return /** @type{!Array<!proto.v1.PSpanEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PSpanEvent, 5));
};


/**
 * @param {!Array<!proto.v1.PSpanEvent>} value
 * @return {!proto.v1.PSpanChunk} returns this
*/
proto.v1.PSpanChunk.prototype.setSpaneventList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.v1.PSpanEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PSpanEvent}
 */
proto.v1.PSpanChunk.prototype.addSpanevent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.v1.PSpanEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.clearSpaneventList = function() {
  return this.setSpaneventList([]);
};


/**
 * optional int32 applicationServiceType = 6;
 * @return {number}
 */
proto.v1.PSpanChunk.prototype.getApplicationservicetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.setApplicationservicetype = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 keyTime = 7;
 * @return {number}
 */
proto.v1.PSpanChunk.prototype.getKeytime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.setKeytime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional PLocalAsyncId localAsyncId = 8;
 * @return {?proto.v1.PLocalAsyncId}
 */
proto.v1.PSpanChunk.prototype.getLocalasyncid = function() {
  return /** @type{?proto.v1.PLocalAsyncId} */ (
    jspb.Message.getWrapperField(this, proto.v1.PLocalAsyncId, 8));
};


/**
 * @param {?proto.v1.PLocalAsyncId|undefined} value
 * @return {!proto.v1.PSpanChunk} returns this
*/
proto.v1.PSpanChunk.prototype.setLocalasyncid = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PSpanChunk} returns this
 */
proto.v1.PSpanChunk.prototype.clearLocalasyncid = function() {
  return this.setLocalasyncid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PSpanChunk.prototype.hasLocalasyncid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PResult.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PResult}
 */
proto.v1.PResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PResult;
  return proto.v1.PResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PResult}
 */
proto.v1.PResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.v1.PResult.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PResult} returns this
 */
proto.v1.PResult.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.v1.PResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PResult} returns this
 */
proto.v1.PResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PSqlMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PSqlMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PSqlMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSqlMetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    sqlid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sql: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PSqlMetaData}
 */
proto.v1.PSqlMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PSqlMetaData;
  return proto.v1.PSqlMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PSqlMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PSqlMetaData}
 */
proto.v1.PSqlMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSqlid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PSqlMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PSqlMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PSqlMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PSqlMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSqlid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSql();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 sqlId = 1;
 * @return {number}
 */
proto.v1.PSqlMetaData.prototype.getSqlid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PSqlMetaData} returns this
 */
proto.v1.PSqlMetaData.prototype.setSqlid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sql = 2;
 * @return {string}
 */
proto.v1.PSqlMetaData.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PSqlMetaData} returns this
 */
proto.v1.PSqlMetaData.prototype.setSql = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PApiMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PApiMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PApiMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PApiMetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    apiinfo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    line: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PApiMetaData}
 */
proto.v1.PApiMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PApiMetaData;
  return proto.v1.PApiMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PApiMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PApiMetaData}
 */
proto.v1.PApiMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApiid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiinfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLine(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PApiMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PApiMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PApiMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PApiMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getApiinfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLine();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 apiId = 1;
 * @return {number}
 */
proto.v1.PApiMetaData.prototype.getApiid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PApiMetaData} returns this
 */
proto.v1.PApiMetaData.prototype.setApiid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string apiInfo = 2;
 * @return {string}
 */
proto.v1.PApiMetaData.prototype.getApiinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PApiMetaData} returns this
 */
proto.v1.PApiMetaData.prototype.setApiinfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 line = 3;
 * @return {number}
 */
proto.v1.PApiMetaData.prototype.getLine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PApiMetaData} returns this
 */
proto.v1.PApiMetaData.prototype.setLine = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 type = 4;
 * @return {number}
 */
proto.v1.PApiMetaData.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PApiMetaData} returns this
 */
proto.v1.PApiMetaData.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PStringMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PStringMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PStringMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PStringMetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PStringMetaData}
 */
proto.v1.PStringMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PStringMetaData;
  return proto.v1.PStringMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PStringMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PStringMetaData}
 */
proto.v1.PStringMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStringid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PStringMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PStringMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PStringMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PStringMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStringvalue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 stringId = 1;
 * @return {number}
 */
proto.v1.PStringMetaData.prototype.getStringid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PStringMetaData} returns this
 */
proto.v1.PStringMetaData.prototype.setStringid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string stringValue = 2;
 * @return {string}
 */
proto.v1.PStringMetaData.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PStringMetaData} returns this
 */
proto.v1.PStringMetaData.prototype.setStringvalue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.v1);
