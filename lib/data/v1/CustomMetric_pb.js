// source: v1/CustomMetric.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.v1.PCustomMetric', null, global);
goog.exportSymbol('proto.v1.PCustomMetric.FieldCase', null, global);
goog.exportSymbol('proto.v1.PCustomMetricMessage', null, global);
goog.exportSymbol('proto.v1.PDoubleValue', null, global);
goog.exportSymbol('proto.v1.PDouleGaugeMetric', null, global);
goog.exportSymbol('proto.v1.PIntCountMetric', null, global);
goog.exportSymbol('proto.v1.PIntGaugeMetric', null, global);
goog.exportSymbol('proto.v1.PIntValue', null, global);
goog.exportSymbol('proto.v1.PLongCountMetric', null, global);
goog.exportSymbol('proto.v1.PLongGaugeMetric', null, global);
goog.exportSymbol('proto.v1.PLongValue', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PCustomMetricMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PCustomMetricMessage.repeatedFields_, null);
};
goog.inherits(proto.v1.PCustomMetricMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PCustomMetricMessage.displayName = 'proto.v1.PCustomMetricMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PCustomMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.PCustomMetric.oneofGroups_);
};
goog.inherits(proto.v1.PCustomMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PCustomMetric.displayName = 'proto.v1.PCustomMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PIntCountMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PIntCountMetric.repeatedFields_, null);
};
goog.inherits(proto.v1.PIntCountMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PIntCountMetric.displayName = 'proto.v1.PIntCountMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PLongCountMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PLongCountMetric.repeatedFields_, null);
};
goog.inherits(proto.v1.PLongCountMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PLongCountMetric.displayName = 'proto.v1.PLongCountMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PIntGaugeMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PIntGaugeMetric.repeatedFields_, null);
};
goog.inherits(proto.v1.PIntGaugeMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PIntGaugeMetric.displayName = 'proto.v1.PIntGaugeMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PLongGaugeMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PLongGaugeMetric.repeatedFields_, null);
};
goog.inherits(proto.v1.PLongGaugeMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PLongGaugeMetric.displayName = 'proto.v1.PLongGaugeMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PDouleGaugeMetric = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PDouleGaugeMetric.repeatedFields_, null);
};
goog.inherits(proto.v1.PDouleGaugeMetric, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PDouleGaugeMetric.displayName = 'proto.v1.PDouleGaugeMetric';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PIntValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PIntValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PIntValue.displayName = 'proto.v1.PIntValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PLongValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PLongValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PLongValue.displayName = 'proto.v1.PLongValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PDoubleValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PDoubleValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PDoubleValue.displayName = 'proto.v1.PDoubleValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PCustomMetricMessage.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PCustomMetricMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PCustomMetricMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PCustomMetricMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PCustomMetricMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    collectintervalList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    custommetricsList: jspb.Message.toObjectList(msg.getCustommetricsList(),
    proto.v1.PCustomMetric.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PCustomMetricMessage}
 */
proto.v1.PCustomMetricMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PCustomMetricMessage;
  return proto.v1.PCustomMetricMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PCustomMetricMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PCustomMetricMessage}
 */
proto.v1.PCustomMetricMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTimestamp(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCollectinterval(values[i]);
      }
      break;
    case 3:
      var value = new proto.v1.PCustomMetric;
      reader.readMessage(value,proto.v1.PCustomMetric.deserializeBinaryFromReader);
      msg.addCustommetrics(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PCustomMetricMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PCustomMetricMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PCustomMetricMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PCustomMetricMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
  f = message.getCollectintervalList();
  if (f.length > 0) {
    writer.writePackedInt64(
      2,
      f
    );
  }
  f = message.getCustommetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.v1.PCustomMetric.serializeBinaryToWriter
    );
  }
};


/**
 * repeated int64 timestamp = 1;
 * @return {!Array<number>}
 */
proto.v1.PCustomMetricMessage.prototype.getTimestampList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.setTimestampList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.addTimestamp = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.clearTimestampList = function() {
  return this.setTimestampList([]);
};


/**
 * repeated int64 collectInterval = 2;
 * @return {!Array<number>}
 */
proto.v1.PCustomMetricMessage.prototype.getCollectintervalList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.setCollectintervalList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.addCollectinterval = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.clearCollectintervalList = function() {
  return this.setCollectintervalList([]);
};


/**
 * repeated PCustomMetric customMetrics = 3;
 * @return {!Array<!proto.v1.PCustomMetric>}
 */
proto.v1.PCustomMetricMessage.prototype.getCustommetricsList = function() {
  return /** @type{!Array<!proto.v1.PCustomMetric>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PCustomMetric, 3));
};


/**
 * @param {!Array<!proto.v1.PCustomMetric>} value
 * @return {!proto.v1.PCustomMetricMessage} returns this
*/
proto.v1.PCustomMetricMessage.prototype.setCustommetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.v1.PCustomMetric=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PCustomMetric}
 */
proto.v1.PCustomMetricMessage.prototype.addCustommetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.v1.PCustomMetric, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PCustomMetricMessage} returns this
 */
proto.v1.PCustomMetricMessage.prototype.clearCustommetricsList = function() {
  return this.setCustommetricsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.PCustomMetric.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.v1.PCustomMetric.FieldCase = {
  FIELD_NOT_SET: 0,
  INTCOUNTMETRIC: 1,
  LONGCOUNTMETRIC: 2,
  INTGAUGEMETRIC: 3,
  LONGGAUGEMETRIC: 4,
  DOUBLEGAUGEMETRIC: 5
};

/**
 * @return {proto.v1.PCustomMetric.FieldCase}
 */
proto.v1.PCustomMetric.prototype.getFieldCase = function() {
  return /** @type {proto.v1.PCustomMetric.FieldCase} */(jspb.Message.computeOneofCase(this, proto.v1.PCustomMetric.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PCustomMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PCustomMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PCustomMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PCustomMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    intcountmetric: (f = msg.getIntcountmetric()) && proto.v1.PIntCountMetric.toObject(includeInstance, f),
    longcountmetric: (f = msg.getLongcountmetric()) && proto.v1.PLongCountMetric.toObject(includeInstance, f),
    intgaugemetric: (f = msg.getIntgaugemetric()) && proto.v1.PIntGaugeMetric.toObject(includeInstance, f),
    longgaugemetric: (f = msg.getLonggaugemetric()) && proto.v1.PLongGaugeMetric.toObject(includeInstance, f),
    doublegaugemetric: (f = msg.getDoublegaugemetric()) && proto.v1.PDouleGaugeMetric.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PCustomMetric}
 */
proto.v1.PCustomMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PCustomMetric;
  return proto.v1.PCustomMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PCustomMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PCustomMetric}
 */
proto.v1.PCustomMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.PIntCountMetric;
      reader.readMessage(value,proto.v1.PIntCountMetric.deserializeBinaryFromReader);
      msg.setIntcountmetric(value);
      break;
    case 2:
      var value = new proto.v1.PLongCountMetric;
      reader.readMessage(value,proto.v1.PLongCountMetric.deserializeBinaryFromReader);
      msg.setLongcountmetric(value);
      break;
    case 3:
      var value = new proto.v1.PIntGaugeMetric;
      reader.readMessage(value,proto.v1.PIntGaugeMetric.deserializeBinaryFromReader);
      msg.setIntgaugemetric(value);
      break;
    case 4:
      var value = new proto.v1.PLongGaugeMetric;
      reader.readMessage(value,proto.v1.PLongGaugeMetric.deserializeBinaryFromReader);
      msg.setLonggaugemetric(value);
      break;
    case 5:
      var value = new proto.v1.PDouleGaugeMetric;
      reader.readMessage(value,proto.v1.PDouleGaugeMetric.deserializeBinaryFromReader);
      msg.setDoublegaugemetric(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PCustomMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PCustomMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PCustomMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PCustomMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntcountmetric();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.PIntCountMetric.serializeBinaryToWriter
    );
  }
  f = message.getLongcountmetric();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.v1.PLongCountMetric.serializeBinaryToWriter
    );
  }
  f = message.getIntgaugemetric();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.PIntGaugeMetric.serializeBinaryToWriter
    );
  }
  f = message.getLonggaugemetric();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.PLongGaugeMetric.serializeBinaryToWriter
    );
  }
  f = message.getDoublegaugemetric();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.PDouleGaugeMetric.serializeBinaryToWriter
    );
  }
};


/**
 * optional PIntCountMetric intCountMetric = 1;
 * @return {?proto.v1.PIntCountMetric}
 */
proto.v1.PCustomMetric.prototype.getIntcountmetric = function() {
  return /** @type{?proto.v1.PIntCountMetric} */ (
    jspb.Message.getWrapperField(this, proto.v1.PIntCountMetric, 1));
};


/**
 * @param {?proto.v1.PIntCountMetric|undefined} value
 * @return {!proto.v1.PCustomMetric} returns this
*/
proto.v1.PCustomMetric.prototype.setIntcountmetric = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.v1.PCustomMetric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PCustomMetric} returns this
 */
proto.v1.PCustomMetric.prototype.clearIntcountmetric = function() {
  return this.setIntcountmetric(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PCustomMetric.prototype.hasIntcountmetric = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PLongCountMetric longCountMetric = 2;
 * @return {?proto.v1.PLongCountMetric}
 */
proto.v1.PCustomMetric.prototype.getLongcountmetric = function() {
  return /** @type{?proto.v1.PLongCountMetric} */ (
    jspb.Message.getWrapperField(this, proto.v1.PLongCountMetric, 2));
};


/**
 * @param {?proto.v1.PLongCountMetric|undefined} value
 * @return {!proto.v1.PCustomMetric} returns this
*/
proto.v1.PCustomMetric.prototype.setLongcountmetric = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.v1.PCustomMetric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PCustomMetric} returns this
 */
proto.v1.PCustomMetric.prototype.clearLongcountmetric = function() {
  return this.setLongcountmetric(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PCustomMetric.prototype.hasLongcountmetric = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PIntGaugeMetric intGaugeMetric = 3;
 * @return {?proto.v1.PIntGaugeMetric}
 */
proto.v1.PCustomMetric.prototype.getIntgaugemetric = function() {
  return /** @type{?proto.v1.PIntGaugeMetric} */ (
    jspb.Message.getWrapperField(this, proto.v1.PIntGaugeMetric, 3));
};


/**
 * @param {?proto.v1.PIntGaugeMetric|undefined} value
 * @return {!proto.v1.PCustomMetric} returns this
*/
proto.v1.PCustomMetric.prototype.setIntgaugemetric = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.v1.PCustomMetric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PCustomMetric} returns this
 */
proto.v1.PCustomMetric.prototype.clearIntgaugemetric = function() {
  return this.setIntgaugemetric(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PCustomMetric.prototype.hasIntgaugemetric = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PLongGaugeMetric longGaugeMetric = 4;
 * @return {?proto.v1.PLongGaugeMetric}
 */
proto.v1.PCustomMetric.prototype.getLonggaugemetric = function() {
  return /** @type{?proto.v1.PLongGaugeMetric} */ (
    jspb.Message.getWrapperField(this, proto.v1.PLongGaugeMetric, 4));
};


/**
 * @param {?proto.v1.PLongGaugeMetric|undefined} value
 * @return {!proto.v1.PCustomMetric} returns this
*/
proto.v1.PCustomMetric.prototype.setLonggaugemetric = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.v1.PCustomMetric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PCustomMetric} returns this
 */
proto.v1.PCustomMetric.prototype.clearLonggaugemetric = function() {
  return this.setLonggaugemetric(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PCustomMetric.prototype.hasLonggaugemetric = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PDouleGaugeMetric doubleGaugeMetric = 5;
 * @return {?proto.v1.PDouleGaugeMetric}
 */
proto.v1.PCustomMetric.prototype.getDoublegaugemetric = function() {
  return /** @type{?proto.v1.PDouleGaugeMetric} */ (
    jspb.Message.getWrapperField(this, proto.v1.PDouleGaugeMetric, 5));
};


/**
 * @param {?proto.v1.PDouleGaugeMetric|undefined} value
 * @return {!proto.v1.PCustomMetric} returns this
*/
proto.v1.PCustomMetric.prototype.setDoublegaugemetric = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.v1.PCustomMetric.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PCustomMetric} returns this
 */
proto.v1.PCustomMetric.prototype.clearDoublegaugemetric = function() {
  return this.setDoublegaugemetric(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PCustomMetric.prototype.hasDoublegaugemetric = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PIntCountMetric.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PIntCountMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PIntCountMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PIntCountMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PIntCountMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.v1.PIntValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PIntCountMetric}
 */
proto.v1.PIntCountMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PIntCountMetric;
  return proto.v1.PIntCountMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PIntCountMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PIntCountMetric}
 */
proto.v1.PIntCountMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.v1.PIntValue;
      reader.readMessage(value,proto.v1.PIntValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PIntCountMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PIntCountMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PIntCountMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PIntCountMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.PIntValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.PIntCountMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PIntCountMetric} returns this
 */
proto.v1.PIntCountMetric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PIntValue values = 2;
 * @return {!Array<!proto.v1.PIntValue>}
 */
proto.v1.PIntCountMetric.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.v1.PIntValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PIntValue, 2));
};


/**
 * @param {!Array<!proto.v1.PIntValue>} value
 * @return {!proto.v1.PIntCountMetric} returns this
*/
proto.v1.PIntCountMetric.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.PIntValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PIntValue}
 */
proto.v1.PIntCountMetric.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.PIntValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PIntCountMetric} returns this
 */
proto.v1.PIntCountMetric.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PLongCountMetric.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PLongCountMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PLongCountMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PLongCountMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLongCountMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.v1.PLongValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PLongCountMetric}
 */
proto.v1.PLongCountMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PLongCountMetric;
  return proto.v1.PLongCountMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PLongCountMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PLongCountMetric}
 */
proto.v1.PLongCountMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.v1.PLongValue;
      reader.readMessage(value,proto.v1.PLongValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PLongCountMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PLongCountMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PLongCountMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLongCountMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.PLongValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.PLongCountMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PLongCountMetric} returns this
 */
proto.v1.PLongCountMetric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PLongValue values = 2;
 * @return {!Array<!proto.v1.PLongValue>}
 */
proto.v1.PLongCountMetric.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.v1.PLongValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PLongValue, 2));
};


/**
 * @param {!Array<!proto.v1.PLongValue>} value
 * @return {!proto.v1.PLongCountMetric} returns this
*/
proto.v1.PLongCountMetric.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.PLongValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PLongValue}
 */
proto.v1.PLongCountMetric.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.PLongValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PLongCountMetric} returns this
 */
proto.v1.PLongCountMetric.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PIntGaugeMetric.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PIntGaugeMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PIntGaugeMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PIntGaugeMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PIntGaugeMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.v1.PIntValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PIntGaugeMetric}
 */
proto.v1.PIntGaugeMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PIntGaugeMetric;
  return proto.v1.PIntGaugeMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PIntGaugeMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PIntGaugeMetric}
 */
proto.v1.PIntGaugeMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.v1.PIntValue;
      reader.readMessage(value,proto.v1.PIntValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PIntGaugeMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PIntGaugeMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PIntGaugeMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PIntGaugeMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.PIntValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.PIntGaugeMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PIntGaugeMetric} returns this
 */
proto.v1.PIntGaugeMetric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PIntValue values = 2;
 * @return {!Array<!proto.v1.PIntValue>}
 */
proto.v1.PIntGaugeMetric.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.v1.PIntValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PIntValue, 2));
};


/**
 * @param {!Array<!proto.v1.PIntValue>} value
 * @return {!proto.v1.PIntGaugeMetric} returns this
*/
proto.v1.PIntGaugeMetric.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.PIntValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PIntValue}
 */
proto.v1.PIntGaugeMetric.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.PIntValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PIntGaugeMetric} returns this
 */
proto.v1.PIntGaugeMetric.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PLongGaugeMetric.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PLongGaugeMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PLongGaugeMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PLongGaugeMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLongGaugeMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.v1.PLongValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PLongGaugeMetric}
 */
proto.v1.PLongGaugeMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PLongGaugeMetric;
  return proto.v1.PLongGaugeMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PLongGaugeMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PLongGaugeMetric}
 */
proto.v1.PLongGaugeMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.v1.PLongValue;
      reader.readMessage(value,proto.v1.PLongValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PLongGaugeMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PLongGaugeMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PLongGaugeMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLongGaugeMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.PLongValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.PLongGaugeMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PLongGaugeMetric} returns this
 */
proto.v1.PLongGaugeMetric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PLongValue values = 2;
 * @return {!Array<!proto.v1.PLongValue>}
 */
proto.v1.PLongGaugeMetric.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.v1.PLongValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PLongValue, 2));
};


/**
 * @param {!Array<!proto.v1.PLongValue>} value
 * @return {!proto.v1.PLongGaugeMetric} returns this
*/
proto.v1.PLongGaugeMetric.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.PLongValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PLongValue}
 */
proto.v1.PLongGaugeMetric.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.PLongValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PLongGaugeMetric} returns this
 */
proto.v1.PLongGaugeMetric.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PDouleGaugeMetric.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PDouleGaugeMetric.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PDouleGaugeMetric.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PDouleGaugeMetric} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PDouleGaugeMetric.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.v1.PDoubleValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PDouleGaugeMetric}
 */
proto.v1.PDouleGaugeMetric.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PDouleGaugeMetric;
  return proto.v1.PDouleGaugeMetric.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PDouleGaugeMetric} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PDouleGaugeMetric}
 */
proto.v1.PDouleGaugeMetric.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.v1.PDoubleValue;
      reader.readMessage(value,proto.v1.PDoubleValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PDouleGaugeMetric.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PDouleGaugeMetric.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PDouleGaugeMetric} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PDouleGaugeMetric.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.v1.PDoubleValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.PDouleGaugeMetric.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PDouleGaugeMetric} returns this
 */
proto.v1.PDouleGaugeMetric.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PDoubleValue values = 2;
 * @return {!Array<!proto.v1.PDoubleValue>}
 */
proto.v1.PDouleGaugeMetric.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.v1.PDoubleValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PDoubleValue, 2));
};


/**
 * @param {!Array<!proto.v1.PDoubleValue>} value
 * @return {!proto.v1.PDouleGaugeMetric} returns this
*/
proto.v1.PDouleGaugeMetric.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.v1.PDoubleValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PDoubleValue}
 */
proto.v1.PDouleGaugeMetric.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.v1.PDoubleValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PDouleGaugeMetric} returns this
 */
proto.v1.PDouleGaugeMetric.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PIntValue.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PIntValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PIntValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PIntValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isnotset: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PIntValue}
 */
proto.v1.PIntValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PIntValue;
  return proto.v1.PIntValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PIntValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PIntValue}
 */
proto.v1.PIntValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnotset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PIntValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PIntValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PIntValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PIntValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIsnotset();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.v1.PIntValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PIntValue} returns this
 */
proto.v1.PIntValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isNotSet = 2;
 * @return {boolean}
 */
proto.v1.PIntValue.prototype.getIsnotset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PIntValue} returns this
 */
proto.v1.PIntValue.prototype.setIsnotset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PLongValue.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PLongValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PLongValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLongValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isnotset: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PLongValue}
 */
proto.v1.PLongValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PLongValue;
  return proto.v1.PLongValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PLongValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PLongValue}
 */
proto.v1.PLongValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnotset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PLongValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PLongValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PLongValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PLongValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getIsnotset();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 value = 1;
 * @return {number}
 */
proto.v1.PLongValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PLongValue} returns this
 */
proto.v1.PLongValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool isNotSet = 2;
 * @return {boolean}
 */
proto.v1.PLongValue.prototype.getIsnotset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PLongValue} returns this
 */
proto.v1.PLongValue.prototype.setIsnotset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PDoubleValue.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PDoubleValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PDoubleValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PDoubleValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    isnotset: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PDoubleValue}
 */
proto.v1.PDoubleValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PDoubleValue;
  return proto.v1.PDoubleValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PDoubleValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PDoubleValue}
 */
proto.v1.PDoubleValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsnotset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PDoubleValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PDoubleValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PDoubleValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PDoubleValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getIsnotset();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.v1.PDoubleValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PDoubleValue} returns this
 */
proto.v1.PDoubleValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional bool isNotSet = 2;
 * @return {boolean}
 */
proto.v1.PDoubleValue.prototype.getIsnotset = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PDoubleValue} returns this
 */
proto.v1.PDoubleValue.prototype.setIsnotset = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.v1);
