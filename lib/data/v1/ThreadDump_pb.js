// source: v1/ThreadDump.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.v1.PActiveThreadDump', null, global);
goog.exportSymbol('proto.v1.PActiveThreadLightDump', null, global);
goog.exportSymbol('proto.v1.PMonitorInfo', null, global);
goog.exportSymbol('proto.v1.PThreadDump', null, global);
goog.exportSymbol('proto.v1.PThreadDumpType', null, global);
goog.exportSymbol('proto.v1.PThreadLightDump', null, global);
goog.exportSymbol('proto.v1.PThreadState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PMonitorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PMonitorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PMonitorInfo.displayName = 'proto.v1.PMonitorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PThreadDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.PThreadDump.repeatedFields_, null);
};
goog.inherits(proto.v1.PThreadDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PThreadDump.displayName = 'proto.v1.PThreadDump';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PThreadLightDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PThreadLightDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PThreadLightDump.displayName = 'proto.v1.PThreadLightDump';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PActiveThreadDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PActiveThreadDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PActiveThreadDump.displayName = 'proto.v1.PActiveThreadDump';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.PActiveThreadLightDump = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.PActiveThreadLightDump, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.v1.PActiveThreadLightDump.displayName = 'proto.v1.PActiveThreadLightDump';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PMonitorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PMonitorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PMonitorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PMonitorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stackdepth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stackframe: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PMonitorInfo}
 */
proto.v1.PMonitorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PMonitorInfo;
  return proto.v1.PMonitorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PMonitorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PMonitorInfo}
 */
proto.v1.PMonitorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStackdepth(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStackframe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PMonitorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PMonitorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PMonitorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PMonitorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStackdepth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStackframe();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 stackDepth = 1;
 * @return {number}
 */
proto.v1.PMonitorInfo.prototype.getStackdepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PMonitorInfo} returns this
 */
proto.v1.PMonitorInfo.prototype.setStackdepth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string stackFrame = 2;
 * @return {string}
 */
proto.v1.PMonitorInfo.prototype.getStackframe = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PMonitorInfo} returns this
 */
proto.v1.PMonitorInfo.prototype.setStackframe = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.PThreadDump.repeatedFields_ = [13,14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PThreadDump.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PThreadDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PThreadDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PThreadDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    threadid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blockedtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockedcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    waitedtime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    waitedcount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lockname: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lockownerid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    lockownername: jspb.Message.getFieldWithDefault(msg, 9, ""),
    innative: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    suspended: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    threadstate: jspb.Message.getFieldWithDefault(msg, 12, 0),
    stacktraceList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    lockedmonitorList: jspb.Message.toObjectList(msg.getLockedmonitorList(),
    proto.v1.PMonitorInfo.toObject, includeInstance),
    lockedsynchronizerList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PThreadDump}
 */
proto.v1.PThreadDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PThreadDump;
  return proto.v1.PThreadDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PThreadDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PThreadDump}
 */
proto.v1.PThreadDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreadid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockedtime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlockedcount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWaitedtime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWaitedcount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockname(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLockownerid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockownername(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInnative(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuspended(value);
      break;
    case 12:
      var value = /** @type {!proto.v1.PThreadState} */ (reader.readEnum());
      msg.setThreadstate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addStacktrace(value);
      break;
    case 14:
      var value = new proto.v1.PMonitorInfo;
      reader.readMessage(value,proto.v1.PMonitorInfo.deserializeBinaryFromReader);
      msg.addLockedmonitor(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addLockedsynchronizer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PThreadDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PThreadDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PThreadDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PThreadDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThreadid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBlockedtime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBlockedcount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getWaitedtime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getWaitedcount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getLockname();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLockownerid();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getLockownername();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getInnative();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getSuspended();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getThreadstate();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getStacktraceList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getLockedmonitorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.v1.PMonitorInfo.serializeBinaryToWriter
    );
  }
  f = message.getLockedsynchronizerList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
};


/**
 * optional string threadName = 1;
 * @return {string}
 */
proto.v1.PThreadDump.prototype.getThreadname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setThreadname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 threadId = 2;
 * @return {number}
 */
proto.v1.PThreadDump.prototype.getThreadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 blockedTime = 3;
 * @return {number}
 */
proto.v1.PThreadDump.prototype.getBlockedtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setBlockedtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 blockedCount = 4;
 * @return {number}
 */
proto.v1.PThreadDump.prototype.getBlockedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setBlockedcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 waitedTime = 5;
 * @return {number}
 */
proto.v1.PThreadDump.prototype.getWaitedtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setWaitedtime = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 waitedCount = 6;
 * @return {number}
 */
proto.v1.PThreadDump.prototype.getWaitedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setWaitedcount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string lockName = 7;
 * @return {string}
 */
proto.v1.PThreadDump.prototype.getLockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setLockname = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 lockOwnerId = 8;
 * @return {number}
 */
proto.v1.PThreadDump.prototype.getLockownerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setLockownerid = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string lockOwnerName = 9;
 * @return {string}
 */
proto.v1.PThreadDump.prototype.getLockownername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setLockownername = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool inNative = 10;
 * @return {boolean}
 */
proto.v1.PThreadDump.prototype.getInnative = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setInnative = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool suspended = 11;
 * @return {boolean}
 */
proto.v1.PThreadDump.prototype.getSuspended = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setSuspended = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional PThreadState threadState = 12;
 * @return {!proto.v1.PThreadState}
 */
proto.v1.PThreadDump.prototype.getThreadstate = function() {
  return /** @type {!proto.v1.PThreadState} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.v1.PThreadState} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setThreadstate = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * repeated string stackTrace = 13;
 * @return {!Array<string>}
 */
proto.v1.PThreadDump.prototype.getStacktraceList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setStacktraceList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.addStacktrace = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.clearStacktraceList = function() {
  return this.setStacktraceList([]);
};


/**
 * repeated PMonitorInfo lockedMonitor = 14;
 * @return {!Array<!proto.v1.PMonitorInfo>}
 */
proto.v1.PThreadDump.prototype.getLockedmonitorList = function() {
  return /** @type{!Array<!proto.v1.PMonitorInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.PMonitorInfo, 14));
};


/**
 * @param {!Array<!proto.v1.PMonitorInfo>} value
 * @return {!proto.v1.PThreadDump} returns this
*/
proto.v1.PThreadDump.prototype.setLockedmonitorList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.v1.PMonitorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.PMonitorInfo}
 */
proto.v1.PThreadDump.prototype.addLockedmonitor = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.v1.PMonitorInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.clearLockedmonitorList = function() {
  return this.setLockedmonitorList([]);
};


/**
 * repeated string lockedSynchronizer = 15;
 * @return {!Array<string>}
 */
proto.v1.PThreadDump.prototype.getLockedsynchronizerList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.setLockedsynchronizerList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.addLockedsynchronizer = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.v1.PThreadDump} returns this
 */
proto.v1.PThreadDump.prototype.clearLockedsynchronizerList = function() {
  return this.setLockedsynchronizerList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PThreadLightDump.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PThreadLightDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PThreadLightDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PThreadLightDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    threadid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    threadstate: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PThreadLightDump}
 */
proto.v1.PThreadLightDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PThreadLightDump;
  return proto.v1.PThreadLightDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PThreadLightDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PThreadLightDump}
 */
proto.v1.PThreadLightDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setThreadid(value);
      break;
    case 3:
      var value = /** @type {!proto.v1.PThreadState} */ (reader.readEnum());
      msg.setThreadstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PThreadLightDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PThreadLightDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PThreadLightDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PThreadLightDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThreadid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getThreadstate();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string threadName = 1;
 * @return {string}
 */
proto.v1.PThreadLightDump.prototype.getThreadname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PThreadLightDump} returns this
 */
proto.v1.PThreadLightDump.prototype.setThreadname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 threadId = 2;
 * @return {number}
 */
proto.v1.PThreadLightDump.prototype.getThreadid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PThreadLightDump} returns this
 */
proto.v1.PThreadLightDump.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PThreadState threadState = 3;
 * @return {!proto.v1.PThreadState}
 */
proto.v1.PThreadLightDump.prototype.getThreadstate = function() {
  return /** @type {!proto.v1.PThreadState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.v1.PThreadState} value
 * @return {!proto.v1.PThreadLightDump} returns this
 */
proto.v1.PThreadLightDump.prototype.setThreadstate = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PActiveThreadDump.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PActiveThreadDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PActiveThreadDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PActiveThreadDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    localtraceid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    threaddump: (f = msg.getThreaddump()) && proto.v1.PThreadDump.toObject(includeInstance, f),
    sampled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    transactionid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    entrypoint: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PActiveThreadDump}
 */
proto.v1.PActiveThreadDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PActiveThreadDump;
  return proto.v1.PActiveThreadDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PActiveThreadDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PActiveThreadDump}
 */
proto.v1.PActiveThreadDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLocaltraceid(value);
      break;
    case 3:
      var value = new proto.v1.PThreadDump;
      reader.readMessage(value,proto.v1.PThreadDump.deserializeBinaryFromReader);
      msg.setThreaddump(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSampled(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntrypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PActiveThreadDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PActiveThreadDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PActiveThreadDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PActiveThreadDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLocaltraceid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getThreaddump();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.PThreadDump.serializeBinaryToWriter
    );
  }
  f = message.getSampled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTransactionid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEntrypoint();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int64 startTime = 1;
 * @return {number}
 */
proto.v1.PActiveThreadDump.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PActiveThreadDump} returns this
 */
proto.v1.PActiveThreadDump.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 localTraceId = 2;
 * @return {number}
 */
proto.v1.PActiveThreadDump.prototype.getLocaltraceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PActiveThreadDump} returns this
 */
proto.v1.PActiveThreadDump.prototype.setLocaltraceid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PThreadDump threadDump = 3;
 * @return {?proto.v1.PThreadDump}
 */
proto.v1.PActiveThreadDump.prototype.getThreaddump = function() {
  return /** @type{?proto.v1.PThreadDump} */ (
    jspb.Message.getWrapperField(this, proto.v1.PThreadDump, 3));
};


/**
 * @param {?proto.v1.PThreadDump|undefined} value
 * @return {!proto.v1.PActiveThreadDump} returns this
*/
proto.v1.PActiveThreadDump.prototype.setThreaddump = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PActiveThreadDump} returns this
 */
proto.v1.PActiveThreadDump.prototype.clearThreaddump = function() {
  return this.setThreaddump(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PActiveThreadDump.prototype.hasThreaddump = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool sampled = 4;
 * @return {boolean}
 */
proto.v1.PActiveThreadDump.prototype.getSampled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PActiveThreadDump} returns this
 */
proto.v1.PActiveThreadDump.prototype.setSampled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string transactionId = 5;
 * @return {string}
 */
proto.v1.PActiveThreadDump.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PActiveThreadDump} returns this
 */
proto.v1.PActiveThreadDump.prototype.setTransactionid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string entryPoint = 6;
 * @return {string}
 */
proto.v1.PActiveThreadDump.prototype.getEntrypoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PActiveThreadDump} returns this
 */
proto.v1.PActiveThreadDump.prototype.setEntrypoint = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.PActiveThreadLightDump.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.PActiveThreadLightDump.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.PActiveThreadLightDump} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PActiveThreadLightDump.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    localtraceid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    threaddump: (f = msg.getThreaddump()) && proto.v1.PThreadLightDump.toObject(includeInstance, f),
    sampled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    transactionid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    entrypoint: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.PActiveThreadLightDump}
 */
proto.v1.PActiveThreadLightDump.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.PActiveThreadLightDump;
  return proto.v1.PActiveThreadLightDump.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.PActiveThreadLightDump} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.PActiveThreadLightDump}
 */
proto.v1.PActiveThreadLightDump.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLocaltraceid(value);
      break;
    case 3:
      var value = new proto.v1.PThreadLightDump;
      reader.readMessage(value,proto.v1.PThreadLightDump.deserializeBinaryFromReader);
      msg.setThreaddump(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSampled(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntrypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.PActiveThreadLightDump.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.PActiveThreadLightDump.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.PActiveThreadLightDump} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.PActiveThreadLightDump.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLocaltraceid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getThreaddump();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.v1.PThreadLightDump.serializeBinaryToWriter
    );
  }
  f = message.getSampled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTransactionid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEntrypoint();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional int64 startTime = 1;
 * @return {number}
 */
proto.v1.PActiveThreadLightDump.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PActiveThreadLightDump} returns this
 */
proto.v1.PActiveThreadLightDump.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 localTraceId = 2;
 * @return {number}
 */
proto.v1.PActiveThreadLightDump.prototype.getLocaltraceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.v1.PActiveThreadLightDump} returns this
 */
proto.v1.PActiveThreadLightDump.prototype.setLocaltraceid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional PThreadLightDump threadDump = 3;
 * @return {?proto.v1.PThreadLightDump}
 */
proto.v1.PActiveThreadLightDump.prototype.getThreaddump = function() {
  return /** @type{?proto.v1.PThreadLightDump} */ (
    jspb.Message.getWrapperField(this, proto.v1.PThreadLightDump, 3));
};


/**
 * @param {?proto.v1.PThreadLightDump|undefined} value
 * @return {!proto.v1.PActiveThreadLightDump} returns this
*/
proto.v1.PActiveThreadLightDump.prototype.setThreaddump = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.v1.PActiveThreadLightDump} returns this
 */
proto.v1.PActiveThreadLightDump.prototype.clearThreaddump = function() {
  return this.setThreaddump(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.v1.PActiveThreadLightDump.prototype.hasThreaddump = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool sampled = 4;
 * @return {boolean}
 */
proto.v1.PActiveThreadLightDump.prototype.getSampled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.v1.PActiveThreadLightDump} returns this
 */
proto.v1.PActiveThreadLightDump.prototype.setSampled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string transactionId = 5;
 * @return {string}
 */
proto.v1.PActiveThreadLightDump.prototype.getTransactionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PActiveThreadLightDump} returns this
 */
proto.v1.PActiveThreadLightDump.prototype.setTransactionid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string entryPoint = 6;
 * @return {string}
 */
proto.v1.PActiveThreadLightDump.prototype.getEntrypoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.v1.PActiveThreadLightDump} returns this
 */
proto.v1.PActiveThreadLightDump.prototype.setEntrypoint = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * @enum {number}
 */
proto.v1.PThreadState = {
  THREAD_STATE_NEW: 0,
  THREAD_STATE_RUNNABLE: 1,
  THREAD_STATE_BLOCKED: 2,
  THREAD_STATE_WAITING: 3,
  THREAD_STATE_TIMED_WAITING: 4,
  THREAD_STATE_TERMINATED: 5,
  THREAD_STATE_UNKNOWN: 6
};

/**
 * @enum {number}
 */
proto.v1.PThreadDumpType = {
  TARGET: 0,
  PENDING: 1
};

goog.object.extend(exports, proto.v1);
